name: Docker Publish (DockerHub)

on:
  release:
    types: [published]
  pull_request:
  workflow_dispatch:
    inputs:
      is_latest:
        type: boolean
        required: false
        default: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: 22

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: ["", "-node"]
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version info
        if: github.event_name == 'release'
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"  # Extract '0.11.0' from 'refs/tags/v0.11.0'
          MAJOR_VERSION="${VERSION%%.*}"      # Extract '0' from '0.11.0'
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "MAJOR_VERSION=$MAJOR_VERSION" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Debug tags
        run: |
          echo "Meta tags: ${{ steps.meta.outputs.tags }}"
          echo "Image Name: ${{ env.IMAGE_NAME }}"
          echo "Matrix variant: ${{ matrix.variant }}"
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "Release version: $VERSION"
            echo "Major version: $MAJOR_VERSION"
            echo "Final tags: ${{ env.IMAGE_NAME }}:$VERSION${{ matrix.variant }}, ${{ env.IMAGE_NAME }}:$MAJOR_VERSION${{ matrix.variant }}, ${{ env.IMAGE_NAME }}:latest${{ matrix.variant }}"
          fi
        shell: sh

      - name: Build Docker image and push for releases
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          context: .
          file: ./Dockerfile
          build-args: ${{ matrix.variant == '-node' && 'WITH_NODE=true' || '' }}
          push: ${{ github.event_name == 'release' }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.VERSION }}${{ matrix.variant }}
            ${{ env.IMAGE_NAME }}:${{ env.MAJOR_VERSION }}${{ matrix.variant }}
            ${{ env.IMAGE_NAME }}:latest${{ matrix.variant }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: 'gflohr/qgoda:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'
