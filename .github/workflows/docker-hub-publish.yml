name: Docker Publish (DockerHub)

on:
  push:
    tags: [ 'v*.*.*' ]
  pull_request:
  workflow_dispatch:
    inputs:
      is_latest:
        type: boolean
        required: false
        default: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  VERSION_TAG: ${{ github.event.inputs.version_tag || github.ref_name }}
  NODE_VERSION: 22

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ "", "-node" ]
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push latest Docker image
        id: build-and-push-latest
        if: ${{ github.event.inputs.is_latest == 'true' || github.event.inputs.is_latest == true }}
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          context: .
          file: ./Dockerfile
          build-args: ${{ matrix.variant == '-node' && 'WITH_NODE=true' || '' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }},${{ env.IMAGE_NAME }}:latest${{ matrix.variant }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push versioned Docker image
        id: build-and-push
        if: ${{ github.event.inputs.is_latest != 'true' && github.event.inputs.is_latest != true }}
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          context: .
          file: ./Dockerfile
          build-args: ${{ matrix.variant == '-node' && 'WITH_NODE=true' || '' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}${{ matrix.variant }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: 'gflohr/qgoda:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'
