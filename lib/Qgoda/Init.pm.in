#! /bin/false

# Copyright (C) 2016 Guido Flohr <guido.flohr@cantanea.com>, 
# all rights reserved.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

package Qgoda::Init;

use strict;

use Qgoda::Util qw(read_file write_file);

use Locale::TextDomain qw('com.cantanea.qgoda');
use File::Spec;
use JSON '2.90';

sub new {
	my ($class) = @_;

    my $q = Qgoda->new;
    my $self = {
        __logger => $q->logger,
        __force => $q->getOption('force'),
        __config => $q->config,
    };

    bless $self, $class;
}

sub init {
	my ($self) = @_;
	
	my $logger = $self->{__logger};
    my $config = $self->{__config};

    # FIXME! Write _config.yaml on the fly, resp. update it.
    my $config_filename = File::Spec->catfile($config->{srcdir}, '_config.yaml');
    my $config_data = $self->__trim($self->__config);
    $self->__write($config_filename, $config_data);
    
    my $view_dir = $config->{directories}->{views};
    $self->__mkdir($view_dir);
    
    $self->__mkdir(File::Spec->catfile($view_dir, 'functions'));

    $self->__mkdir(File::Spec->catfile($view_dir, 'wrappers'));
    
    my $html5_filename = File::Spec->catfile($view_dir, 'wrappers', 'html5.html');
    $self->__write($html5_filename, $self->__trim($self->__wrappersHTML5));

    my $setup_filename = File::Spec->catfile($view_dir, 'functions', 'setup.tt');
    $self->__write($setup_filename, $self->__trim($self->__functionsSetup));
    my $scripts_filename = File::Spec->catfile($view_dir, 'functions', 'scripts.tt');
    $self->__write($scripts_filename, $self->__trim($self->__functionsScripts));
    my $styles_filename = File::Spec->catfile($view_dir, 'functions', 'styles.tt');
    $self->__write($styles_filename, $self->__trim($self->__functionsStyles));
        
    $self->__mkdir(File::Spec->catfile($view_dir, 'partials'));
    
    my $body_filename = File::Spec->catfile($view_dir, 'partials', 'body.html');
    $self->__write($body_filename, $self->__trim($self->__partialsBody));
    
    $self->__mkdir(File::Spec->catfile($view_dir, 'partials', 'body'));

    my $header_filename = File::Spec->catfile($view_dir, 'partials', 'body', 'header.html');
    $self->__write($header_filename, $self->__trim($self->__partialsBodyHeader));
    
    my $footer_filename = File::Spec->catfile($view_dir, 'partials', 'body', 'footer.html');
    $self->__write($footer_filename, $self->__trim($self->__partialsBodyFooter));
    
    my $head_filename = File::Spec->catfile($view_dir, 'partials', 'head.html');
    $self->__write($head_filename, $self->__trim($self->__partialsHead));

    $self->__node;

	return $self;
}

sub command(@) {
    my ($self, @args) = @_;

    my @pretty;
    foreach my $arg (@args) {
        my $pretty = $arg;
        $pretty =~ s{(["\\])}{\\$1}g;
        $pretty = qq{"$pretty"} if $pretty =~ /[ \t]/;
        push @pretty, $pretty;
    }

    my $q = Qgoda->new;
    my $logger = $q->logger;

    my $pretty = join ' ', @pretty;
    $logger->info(__x("Running '{command}':", command => $pretty));

    if (0 != system @args) {
        $logger->error(__x("Running '{command}' failed: {error}", 
                       command => $pretty, error => $!));
        return;
    }

    return $self;
}

sub updatePackageJSON {
    my ($self, $variable, $value) = @_;

    my $logger = $self->{__logger};

    my $json = JSON->new;
    my $json_data = read_file 'package.json'
        or $self->{__logger}->fatal(__x("Unable to read '{filename}': {error})",
                                        filename => 'package.json',
                                        error => $!));

    my $package = eval { $json->decode($json_data) };
    $logger->fatal($@) if $@;

    if (defined $value) {
        $logger->info(__x("Updating variable '{variable}' in 'package.json'.",
                          variable => $variable));
        $package->{$variable} = $value;
    } else {
        $logger->info(__x("Deleting variable '{variable}' in 'package.json'.",
                          variable => $variable));
        delete $package->{variable};
    }

    $json->pretty(1);
    $json_data = $json->encode($package);

    write_file 'package.json', $json_data
        or $self->{__logger}->fatal(__x("Unable to write '{filename}': {error})",
                                        filename => 'package.json',
                                        error => $!));
    
    return $self;
}

sub __node {
    my ($self) = @_;

    my $q = Qgoda->new;
    my $logger = $q->logger;
    
    my @cmd = ('npm', 'init', '--yes');
    push @cmd, '--force' if $self->{__force};

    if (!$self->command(@cmd)) {
        $logger->error(__"Cannot setup asset processing.");
        return;
    }

    my @deps = (
        # Development web server.
        'browser-sync',
        'ajv',

        # Bundling.
        'webpack',

        # Bootstrap and Dependencies.  This is just an example.
        'bootstrap',
        'jquery',
        'popper',
        'tether',
    );

    foreach my $dep (@deps) {
        @cmd = ('npm', 'install', '--save-dev', $dep);
        $self->command(@cmd);
    }

    my $config = $self->{__config};
    my $webpack_config_filename = File::Spec->catfile($config->{srcdir}, 
                                                      'webpack.config.js');
    my $webpack_config = $self->__webpackConfig;
    $self->__write($webpack_config_filename, $webpack_config);

    # PostCSS configuration.
    $self->updatePackageJSON(postcss => {
        parser => 'postcss-scss',
        plugins => {
            cssnano => {},
            'postcss-cssnext' => {},
        }
    });

    # Scripts.
    $self->updatePackageJSON(scripts => {
        start => 'webpack --progress --colors --watch & '
                 . 'browser-sync start --port 5000 --server __site'
                 . '--files _timestamp',
        prestart => 'npm install',
        build => 'webpack --progress --colors',
        prebuild => 'npm install',
        test => 'echo "Error: no test specified"; exit 1'
    });

    return $self;
}

sub __mkdir {
    my ($self, $directory) = @_;
    
    return $self if -e $directory;
    
    my $q = Qgoda->new;
    my $logger = $q->logger;
    
    $logger->info(__x("Creating directory '{directory}.", 
                      directory => $directory));

    mkdir $directory
        or $logger->fatal(__x("Error creating directory '{dir}': {error}!",
                              dir => $directory, error => $!));
    
    return $self;
}

sub __write {
    my ($self, $filename, $content) = @_;
    
    my $q = Qgoda->new;
    my $logger = $q->logger;
    my $config = $q->config;
    
    if (-e $filename && !$self->{__force}) {
        $logger->warning(__x("Not overwriting '{filename}'!",
                             filename => $filename));
        return $self;
    }
    
    $content =~ s/\@([^\@]+)\@/$config->{$1}/g;
    
    $logger->info(__x("Initializing '{filename}'.", filename => $filename));
    
    open my $fh, ">$filename" 
        or $logger->fatal(__x("Cannot write '{filename}': {error}!\n",
                              filename => $filename, error => $!));
    print $fh $content;
    close $fh 
        or $logger->fatal(__x("Cannot write '{filename}': {error}!\n",
                              filename => $filename, error => $!));
    
    return $self;
}

sub __trim {
    my ($self, $content) = @_;
    
    $content =~ s/\n+$/\n/;
    
    return $content;
}

sub __config {
    return <<'EOF';
@_config.yaml@
EOF
}

sub __webpackConfig {
    return <<'EOF';
@webpack.config.js@
EOF
}

sub __functionsSetup {
    return <<'EOF';
@_views/functions/setup.tt@
EOF
}

sub __functionsScripts {
    return <<'EOF';
@_views/functions/scripts.tt@
EOF
}

sub __functionsStyles {
    return <<'EOF';
@_views/functions/styles.tt@
EOF
}

sub __wrappersHTML5 {
    return <<'EOF';
@_views/wrappers/html5.html@
EOF
}

sub __partialsBody {
    return <<'EOF';
@_views/partials/body.html@
EOF
}

sub __partialsBodyHeader {
    return <<'EOF';
@_views/partials/body/header.html@
EOF
}

sub __partialsBodyFooter {
    return <<'EOF';
@_views/partials/body/footer.html@
EOF
}

sub __partialsHead {
    return <<'EOF';
@_views/partials/body.html@
EOF
}

1;

=head1 NAME

Qgoda::Init - Initialize Qgoda site in current directory.
